Upon running the program, the thread numbers repeat and are out of order with the order varying upon each run. The results vary each run, even when performing a demanding process at the same time. The variable passed to the go() function is in a shared state because we pass the address of this variable to an allocated register instead of the value the go() argument. In main(), the variable is in an inherently shared state, though it belongs to the main thread. Because we pass the address in memory, the value of the argument in the created threads can still be changed by the main thread. The compiler stores i in the main thread memory allocation. When removing the second for loop, the output is exlusively the hello messages from each thread. We still, however, see the repeated thread numbers.
